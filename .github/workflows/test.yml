name: Test Suite

on:
  # Allow manual trigger
  workflow_dispatch:
  # Run on pull requests (including new commits pushed to PR)
  pull_request:
    branches: [ main, master ]
  # Run on pushes to main/master only
  push:
    branches: [ main, master ]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run unit tests
      run: make test-unit

    - name: Run unit tests with race detector
      run: go test -race -v ./internal/...

  e2e-tests:
    name: E2E Tests (Mocked)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run E2E tests
      run: make test-e2e

  integration-tests:
    name: E2E Integration Tests (Kind)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Install kind
      run: go install sigs.k8s.io/kind@latest

    - name: Install kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'latest'

    - name: Run kind integration tests
      run: make test-e2e-kind
      timeout-minutes: 15

    - name: Cleanup kind clusters (if exists)
      if: always()
      run: |
        kind delete cluster --name k8s-proxy-e2e-test || true
        kind delete cluster --name k8s-node-proxy-test || true

  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build binary
      run: make build

    - name: Verify binary exists
      run: test -f bin/k8s-node-proxy

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: k8s-node-proxy
        path: bin/k8s-node-proxy
        retention-days: 7

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, integration-tests, build-verification]
    if: always()

    steps:
    - name: Check test results
      run: |
        echo "Test Results Summary:"
        echo "===================="
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "E2E Tests: ${{ needs.e2e-tests.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "Build Verification: ${{ needs.build-verification.result }}"
        echo ""

        if [ "${{ needs.unit-tests.result }}" != "success" ] || \
           [ "${{ needs.e2e-tests.result }}" != "success" ] || \
           [ "${{ needs.integration-tests.result }}" != "success" ] || \
           [ "${{ needs.build-verification.result }}" != "success" ]; then
          echo "❌ Some tests failed"
          exit 1
        else
          echo "✅ All tests passed!"
        fi
